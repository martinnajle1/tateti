{"version":3,"sources":["App.js","index.js"],"names":["initialBoard","Array","fill","boardWinners","PLAYERS","App","useState","player","togglePlayer","number","setNumber","winner","isWinner","board","setBoard","isOver","Result","className","Cell","index","aClass","onClick","newBoard","playerWon","handleClick","disabled","some","boardWinner","every","el","map","_","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAIIA,EAAeC,MADK,GACkBC,KAAK,MACzCC,EAAe,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IACpGC,EAAiB,MAAjBA,EAA6B,MAyDpBC,MAvDf,WACE,MAA6BC,mBAASF,GAAtC,mBAAKG,EAAL,KAAaC,EAAb,KACA,EAA0BF,mBAAS,GAAnC,mBAAKG,EAAL,KAAaC,EAAb,KACA,EAAyBJ,mBAAS,MAAlC,mBAAKK,EAAL,KAAaC,EAAb,KACA,EAAwBN,mBAASN,GAAjC,mBAAKa,EAAL,KAAYC,EAAZ,KAEMC,EAAS,kBAXO,IAWDN,GAA8BE,GAE7CK,EAAS,SAAC,GAAD,SAAGL,OAA+B,mBAAGM,UAAS,iBAAYV,IAAWH,EAAc,OAAS,OAA1D,oBAAR,MAEnCc,EAAO,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACVC,EAAS,GACTP,EAAMM,KACRC,EAAUP,EAAMM,KAAWf,EAAe,aAAe,aAgB3D,OACE,wBAAQa,UAAU,OAAOI,QAAS,kBAfhB,WAClB,IAAKR,EAAMM,GAAQ,CACjB,IAAMG,EAAQ,YAAOT,GACrBS,EAASH,GAASZ,EAClBO,EAASQ,GACLC,EAAUD,EAAUf,GACtBK,GAAS,IAETJ,EAAcD,IAAWH,EAAcA,EAAcA,GACrDM,EAAUD,EAAS,KAMiBe,IAAeC,SAAUV,IAAjE,SACGF,EAAMM,IAAU,qBAAKF,UAAWG,OAKjCG,EAAY,SAACD,EAAUf,GAAX,OAChBJ,EAAauB,MAAK,SAAAC,GAAW,OAAIA,EAAYC,OAAM,SAAAC,GAAE,OAAIP,EAASO,KAAQtB,SAI5E,OACE,qCACE,kDACA,sBAAKU,UAAU,MAAf,UACGJ,EAAMiB,KAAI,SAACC,EAAGZ,GAAJ,OACT,cAACD,EAAD,CAAMC,MAAOA,OAEf,cAACH,EAAD,CAAQL,OAAQA,IACfI,MAAaJ,GAAU,kDCpDhCqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d86b9f8f.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nconst NUMBER_OF_CELLS = 9;\nlet initialBoard = Array(NUMBER_OF_CELLS).fill(null);\nconst boardWinners = [[0, 1, 2], [0, 4, 8], [0, 3, 6], [1, 4, 7], [2, 4, 6], [2, 5, 8], [3, 4, 5], [6, 7, 8]];\nconst PLAYERS = { ONE: 'ONE', TWO: 'TWO' };\n\nfunction App() {\n  let [player, togglePlayer] = useState(PLAYERS.ONE);\n  let [number, setNumber] = useState(0);\n  let [winner, isWinner] = useState(null);\n  let [board, setBoard] = useState(initialBoard);\n\n  const isOver = () => number === NUMBER_OF_CELLS || winner;\n\n  const Result = ({ winner }) => !winner ? null : (<p className={`winner ${player === PLAYERS.ONE ? 'blue' : 'red'}`}>WINNER</p>);\n\n  const Cell = ({ index }) => {\n    let aClass = '';\n    if (board[index]) {\n      aClass = (board[index] === PLAYERS.ONE) ? 'blueCircle' : 'redCircle';\n    }\n    const handleClick = () => {\n      if (!board[index]) {\n        const newBoard = [...board];\n        newBoard[index] = player;\n        setBoard(newBoard);\n        if (playerWon(newBoard, player)) {\n          isWinner(true);\n        } else {\n          togglePlayer((player === PLAYERS.ONE ? PLAYERS.TWO : PLAYERS.ONE));\n          setNumber(number + 1);\n        }\n      }\n      return;\n    }\n    return (\n      <button className='cell' onClick={() => handleClick()} disabled={isOver()}>\n        {board[index] && <div className={aClass}></div>}\n      </button>)\n  };\n\n  //Check if the player has won\n  const playerWon = (newBoard, player) =>\n    boardWinners.some(boardWinner => boardWinner.every(el => newBoard[el] === player)\n    );\n\n\n  return (\n    <>\n      <h1>Tic Tac Toe Game</h1>\n      <div className=\"App\">\n        {board.map((_, index) =>\n          <Cell index={index} />\n        )}\n        <Result winner={winner} />\n        {isOver() && !winner && <h1>GAME OVER</h1>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}